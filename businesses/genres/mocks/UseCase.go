// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	genres "mini-project-movie-api/businesses/genres"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: genreDomain
func (_m *UseCase) Create(genreDomain *genres.Domain) genres.Domain {
	ret := _m.Called(genreDomain)

	var r0 genres.Domain
	if rf, ok := ret.Get(0).(func(*genres.Domain) genres.Domain); ok {
		r0 = rf(genreDomain)
	} else {
		r0 = ret.Get(0).(genres.Domain)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *UseCase) Delete(id string) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UseCase) GetAll() []genres.Domain {
	ret := _m.Called()

	var r0 []genres.Domain
	if rf, ok := ret.Get(0).(func() []genres.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]genres.Domain)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *UseCase) GetByID(id string) genres.Domain {
	ret := _m.Called(id)

	var r0 genres.Domain
	if rf, ok := ret.Get(0).(func(string) genres.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(genres.Domain)
	}

	return r0
}

// GetByName provides a mock function with given fields: name
func (_m *UseCase) GetByName(name string) genres.Domain {
	ret := _m.Called(name)

	var r0 genres.Domain
	if rf, ok := ret.Get(0).(func(string) genres.Domain); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(genres.Domain)
	}

	return r0
}

// Update provides a mock function with given fields: id, genreDomain
func (_m *UseCase) Update(id string, genreDomain *genres.Domain) genres.Domain {
	ret := _m.Called(id, genreDomain)

	var r0 genres.Domain
	if rf, ok := ret.Get(0).(func(string, *genres.Domain) genres.Domain); ok {
		r0 = rf(id, genreDomain)
	} else {
		r0 = ret.Get(0).(genres.Domain)
	}

	return r0
}

type mockConstructorTestingTNewUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUseCase(t mockConstructorTestingTNewUseCase) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
